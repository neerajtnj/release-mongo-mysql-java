package upgrad;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Driver {

    /**
     * Driver class main method
     * @param args
     * @throws SQLException
     */
    public static void main(String[] args) throws SQLException {
        // MySql credentials
        String mysqlUrl="jdbc:mysql://YOURMYSQLURL";
        String mysqlUserName="student";
        String mysqlPassword="STUDENT123";
        

        // Connection Default Value Initialization
        Connection sqlConnection = null;
        MongoClient mongoClient = null;
        

        try {
            // Creating database connections
            Class.forName("com.mysql.jdbc.Driver");
            sqlConnection = DriverManager.getConnection(
                    mysqlUrl, mysqlUserName, mysqlPassword);

         // MongoDB Configurations
            //creating mongo client 
            mongoClient = MongoClients.create("mongodb://YOURMONGOURL/test");
            
            //insert into mongodb from mobile tables 
            insertIntoMongoDb(mongoClient,sqlConnection,"Mobiles","select * from mobiles");
            
            //insert into mongodb from camera tables 
            insertIntoMongoDb(mongoClient,sqlConnection,"Cameras","select * from cameras");
            
            //insert into mongodb from headphones tables 
            insertIntoMongoDb(mongoClient,sqlConnection,"Headphones","select * from headphones");

           
            MongoDatabase database = mongoClient.getDatabase("students");
            
            MongoCollection<Document> collection = database.getCollection("products");
            // List all products in the inventory
            CRUDHelper.displayAllProducts(collection);

            // Display top 5 Mobiles
            CRUDHelper.displayTop5Mobiles(collection);

            // Display products ordered by their categories in Descending Order Without autogenerated Id
            CRUDHelper.displayCategoryOrderedProductsDescending(collection);

            // Display product count in each category
            CRUDHelper.displayProductCountByCategory(collection);

            // Display wired headphones
            CRUDHelper.displayWiredHeadphones(collection);
        }
        catch (SQLException ex) {
            System.out.println("Got Exception.");
            ex.printStackTrace();
        }
        catch (Exception ex) {
            System.out.println("Got Exception.");
            ex.printStackTrace();
        } finally {
            sqlConnection.close();
            mongoClient.close();

        }
    }
    
    /**
     * function use to covert data from resultset .This is generic function based on
     * Category, it convert document
     * @param mysqlObj
     * @param catagory
     * @return
     */
    public static List<Document> importMysqlDataToMongo(ResultSet mysqlObj,String catagory)
    {
    	List<Document> documentList= new ArrayList();
    	ObjectMapper obj= new ObjectMapper();
    	try {
			List<Map<String, String>> resultSetToList = resultSetToList(mysqlObj,catagory);
			TypeReference<List<Document>> mongoTypeRef=new TypeReference<List<Document>>() {
			};
			documentList = obj.convertValue(resultSetToList,mongoTypeRef);
			System.out.println("Documents: "+resultSetToList);
		} catch (SQLException e) {
			e.printStackTrace();
		}
    	return documentList;
    }
    
	/**
	 *  we used to make generic as we are doing ETL kind of stuff
	  * Suppose we have more table so manually setting the object its data redundancy 
	 * @param rs
	 * @param catagory
	 * @return
	 * @throws SQLException
	 */
    private static List<Map<String, String>>  resultSetToList(ResultSet rs,String catagory) throws SQLException {
        ResultSetMetaData md = rs.getMetaData();
        int columns = md.getColumnCount();
        System.out.println("Columns count :"+columns);
        List<Map<String, String>> rows = new ArrayList<Map<String, String>>();
        while (rs.next()){
            Map<String, String> row = new HashMap<String, String>(columns);
            for(int i = 0; i <= columns; ++i){
            	if(i==0)
            	{
            		row.put("Category", catagory);
            		continue;
            	}
            	else
            		{if(rs.getString(i)!=null && !rs.getString(i).isEmpty())
            			row.put(md.getColumnName(i), rs.getString(i));
            		}
            }
            rows.add(row);
        }
        System.out.println("Tables: "+rows);
        return rows;
    }
    /**
     * function used to extract data from based on sql query.this is generic function
     * @param sqlConnection
     * @param sql
     * @return
     */
    public static ResultSet mysqlExtractionData(Connection sqlConnection,String sql)
    {
        PreparedStatement statement=null;
        ResultSet mobileResultSet=null;
		try {
			statement = sqlConnection.prepareStatement(sql);
			mobileResultSet = statement.executeQuery();
		} catch (SQLException e) {
			e.printStackTrace();
		}

        
		return mobileResultSet;
    	
    }
    
    public static void insertIntoMongoDb(MongoClient mongoClient,Connection sqlConnection,String catagory,String mysqlQuery)
    {

    	 MongoDatabase productsDatabase = mongoClient.getDatabase("test");
    	 System.out.println("MongoDatabase :"+productsDatabase);
    	 if(productsDatabase.getCollection("products")==null)
    		 productsDatabase.createCollection("products");

    	 MongoCollection<Document> collection = productsDatabase.getCollection("products");
         Document doc = new Document();
         doc.append("Category", catagory);
         FindIterable<Document> filter = collection.find(doc);
         Document firstDoc = filter.first();
         if(firstDoc==null)
         {
    	  ResultSet mysqlExtractionData = mysqlExtractionData(sqlConnection,mysqlQuery);
    	  List<Document> importMysqlDataToMongo = importMysqlDataToMongo(mysqlExtractionData,catagory);
    	  collection.insertMany(importMysqlDataToMongo);
    	  System.out.println("Data insertion in attached category : "+catagory);
         }
          else
        	  System.out.println("Data insertion opertion already performed for category : "+catagory);
    
    }
     
    
}
